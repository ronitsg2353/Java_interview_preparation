------------------------------------------------------------------------------------------------------------------------
Selenium cant handle Desktop application.open source for web application

Appium-->mobile application testing

Desktop application-->
Robot Framework-->
WinAppDriver-->
katalon-->
---------------------------------------------------------------------------------------------------------
Selenium Webdriver-->Selenium WebDriver is a code library of APIs for controlling browsers.
Selenium Grid--> Selenium Grid is a smart proxy server that makes it easy to run tests in parallel on multiple machines
Selnoid-->Selenoid is an open-source, automated testing solution that runs browsers in Docker containers
selense-->scripting language-used for writing selenium command
Selenium IDE-->open source having record and playback feature
-----------------------------------------------------------------------------------------------------------
Difference verify and Assert?

verify(soft assertion)-->If the verify condition fails, the test continues to run until the last test is executed.
Assert(hard assertion)-->If the assert condition fails, the test case is marked as failed,
and the remaining tests are skipped
----------------------------------------------------------------------------------------------------------

                ## Selenium Exception ###
 Difference between Invalid Session or NoSession Exception-->

 0.NoSuchSessionException:-->when browser session is no longer active

1.InvalidSessionIDException:-->server does not recognize session identifier and associated user token is no longer authorized or authneticated on platform.

 2.NoAlertPresentException-->Raised when an expected alert is not present. Happens when trying to interact
 with an alert that doesn’t exist.
 solution-->use try-catch block

 3.ElementClickInterceptedException-->raised when an element you try to click is not clickable because another element is blocking it.
solution-->use javaSriptExecutor
 -----------------------------------------------------------------------------------------------------------------------

                   ### waits #####

 Thread.sleep-->Thread.sleep(2000)-->static wait provided by java

 implicit wait-->driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
 WebDriver to wait for a specified amount of time when trying to locate an element before throwing a NoSuchElementException.


Explicit wait--> wait for a specific condition to be true before proceeding further.
It allows you to wait for a particular element or condition with a specific timeout.

 Explicit wait-->WebDriverWait wait = new WebDriverWait(driver,30);
                 wait.until(ExpectedConditions.visibilityOfElementLocated(WebElement);

 Fluent wait-->Fluent wait looking element the wait conditions, such as checking for the condition at regular intervals
 and ignoring certain exceptions

 FluentWait wait = new FluentWait(driver);
 wait.withTimeout(5000, TimeUnit.MILLISECONDS).pollingEvery(250, TimeUnit.MILLISECONDS).ignoring(NoSuchElementException.class)
.until(ExpectedConditions.alertIsPresent());

which wait is better?--> Explicit wait
-------------------------------------------------------------------------------------------------------------------------

                ## JavaScriptExceutor ###
 JavaScriptExecutor is an interface that is used to execute JavaScriprt through selenium webdriver. JavaScript is a programming language
  that interacts with HTML in a browser, and to use this function in Selenium, JavascriptExecutor is required.

  JavascriptExecutor js = (JavascriptExecutor) driver;
  scroll by-->  js.executeScript(“window.scrollBy(0,150)”);
  get title--> string sText =  js.executeScript(“return document.title;”).toString();
  inner text of webpage-->string sText =  js.executeScript(“return document.documentElement.innerText;”).toString();
  alert poput window--> Js.executeScript(“alert(‘hello world’);”);

  ----------------------------------------------------------------------------------------------------------------------
                    findElement() and findElements()?
  findElement()-->method which finding out webelement of webpage and return noELmentfoundExption for no webelement.
  findElements()-->method which finding out mutliple element of webpage and return zero element for no webelment.
  ---------------------------------------------------------------------------------------------------------------------------
               Diff between getWindowHandle and getWindowHandles ?

  It is a unique identifier that holds the address of all the windows. Think of it as a pointer to a window, which returns the string value.
  It is assumed that each browser will have a unique window handle.

  getWindowHandle-->This method helps to get the window handle of the current window
                    String parentWindow=driver.getWindowHandle();

  getWindowHandles-->This method helps to get the handles of all the windows opened
                    String <set> allwindows=driver.getWindowHandles();

  switch to: This method helps to switch between the windows
  action: This method helps to perform certain actions on the windows
  ---------------------------------------------------------------------------------------------------------
                     ### Action class ###

  Action-->Interface
  Actions-->class

  Actions class is an ability provided by Selenium for handling keyboard and mouse events

  Actions action=new Actions(driver);
  action.moveToElement(element).build().perform();
  click()-->    action.click(element).build().perform();


  Mouse Actions in Selenium:

  doubleClick(): Performs double click on the element
  action.doubleClick(element).perform();

  clickAndHold(): Performs long click on the mouse without releasing it
  action.clickAndHold(element).perform();

  dragAndDrop(): Drags the element from one point and drops to another
  action.dragAndDrop(sourcelocator,destinationlocator).build().perform();

  moveToElement(): Shifts the mouse pointer to the center of the element

  contextClick(): Performs right-click on the mouse
  action.contextClick(element).build().perform();

  sendKey()--
  WebElement searchbox=driver.findElmenet(xpath);
  action.sendkey(searchbox,"selenium").perform();

  --------------#####------####-------####---------#####----------####-------####-----####----
  Keyboard events:

   Actions action=new Actions(driver);
  1.TAB-->
  action.sendKeys(keys.TAB);

  2.control+All
  // Select the Current Address using CTRL + A
          actions.keyDown(Keys.CONTROL);
          actions.sendKeys("a");

 --------------------------------------------------------------------------------------------------------
                ### PageFactory ###

PageFactory-->
1.Finding web elements using @FindBy

Page Factory is a class provided by Selenium WebDriver to support Page Object Design patterns. In Page Factory, testers use @FindBy annotation.
The initElements method is used to initialize web elements.

public BrowserStackHomePage(WebDriver driver) {
this.driver = driver;
PageFactory.initElements(driver, this);
}

PageObject Model-->
1.finding webelements "By"

-------------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------------
  Capabilities-->








