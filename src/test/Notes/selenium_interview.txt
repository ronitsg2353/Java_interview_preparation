------------------------------------------------------------------------------------------------------------------------
Selenium cant handle Desktop application.open source for web application

Appium-->mobile application testing

Desktop application-->
Robot Framework-->
WinAppDriver-->
katalon-->
---------------------------------------------------------------------------------------------------------
Selenium Webdriver-->Selenium WebDriver is a code library of APIs for controlling browsers.
Selenium Grid--> Selenium Grid is a smart proxy server that makes it easy to run tests in parallel on multiple machines
Selnoid-->Selenoid is an open-source, automated testing solution that runs browsers in Docker containers
selense-->scripting language-used for writing selenium command
Selenium IDE-->open source having record and playback feature
-----------------------------------------------------------------------------------------------------------
                    ### absolute xpath and Relative xpath ###

1.absolute xpath--> starts of root of HTML document to desired element
2.Relative xpath--> middle of dom element to desired element
------------------------------------------------------------------------------------------------------------
Difference verify and Assert?

verify(soft assertion)-->If the verify condition fails, the test continues to run until the last test is executed.
Assert(hard assertion)-->If the assert condition fails, the test case is marked as failed,
and the remaining tests are skipped
----------------------------------------------------------------------------------------------------------

                ## Selenium Exception ###
 Difference between Invalid Session or NoSession Exception-->

 0.NoSuchSessionException:-->when browser session is no longer active

1.InvalidSessionIDException:-->server does not recognize session identifier and associated user token is no longer authorized or authneticated on platform.

 2.NoAlertPresentException-->Raised when an expected alert is not present. Happens when trying to interact
 with an alert that doesn’t exist.
 solution-->use try-catch block4.

 3.ElementClickInterceptedException-->raised when an element you try to click is not clickable because another element is blocking it.
solution-->use javaSriptExecutor

4.StaleElementReferenceException--> element is no longer attached to the actual DOM of the web page


 -----------------------------------------------------------------------------------------------------------------------

                   ### waits #####

 Thread.sleep-->Thread.sleep(2000)-->static wait provided by java

 implicit wait-->driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
 WebDriver to wait for a specified amount of time when trying to locate an element before throwing a NoSuchElementException.


Explicit wait--> wait for a specific condition to be true before proceeding further.
It allows you to wait for a particular element or condition with a specific timeout.

 Explicit wait-->WebDriverWait wait = new WebDriverWait(driver,30);
                 wait.until(ExpectedConditions.visibilityOfElementLocated(WebElement);

 Fluent wait-->Fluent wait looking element the wait conditions, such as checking for the condition at regular intervals
 and ignoring certain exceptions

 FluentWait wait = new FluentWait(driver);
 wait.withTimeout(5000, TimeUnit.MILLISECONDS).pollingEvery(250, TimeUnit.MILLISECONDS).ignoring(NoSuchElementException.class)
.until(ExpectedConditions.alertIsPresent());

which wait is better?--> Explicit wait
-------------------------------------------------------------------------------------------------------------------------

                ## JavaScriptExceutor ###
 JavaScriptExecutor is an interface that is used to execute JavaScript through selenium webdriver. JavaScript is a programming language
  that interacts with HTML in a browser, and to use this function in Selenium, JavascriptExecutor is required.

  JavascriptExecutor js = (JavascriptExecutor) driver;
  scroll by-->  js.executeScript(“window.scrollBy(0,150)”);
  get title--> string sText =  js.executeScript(“return document.title;”).toString();
  inner text of webpage-->string sText =  js.executeScript(“return document.documentElement.innerText;”).toString();
  alert poput window--> Js.executeScript(“alert(‘hello world’);”);

  ----------------------------------------------------------------------------------------------------------------------
                    findElement() and findElements()?
  findElement()-->method which finding out webelement of webpage and return noELmentfoundExption for no webelement.
  findElements()-->method which finding out mutliple element of webpage and return zero element for no webelment.
  ---------------------------------------------------------------------------------------------------------------------------
               Diff between getWindowHandle and getWindowHandles ?

  It is a unique identifier that holds the address of all the windows. Think of it as a pointer to a window, which returns the string value.
  It is assumed that each browser will have a unique window handle.

  getWindowHandle-->This method helps to get the window handle of the current window
                    String parentWindow=driver.getWindowHandle();

  getWindowHandles-->This method helps to get the handles of all the windows opened
                    String <set> allwindows=driver.getWindowHandles();

  switch to: This method helps to switch between the windows
  action: This method helps to perform certain actions on the windows
  ---------------------------------------------------------------------------------------------------------
                     ### Action class ###

  Action-->Interface
  Actions-->class

  Actions class is an ability provided by Selenium for handling keyboard and mouse events

  Actions action=new Actions(driver);
  action.moveToElement(element).build().perform();
  click()-->    action.click(element).build().perform();


  Mouse Actions in Selenium:

  doubleClick(): Performs double click on the element
  action.doubleClick(element).perform();

  clickAndHold(): Performs long click on the mouse without releasing it
  action.clickAndHold(element).perform();

  dragAndDrop(): Drags the element from one point and drops to another
  action.dragAndDrop(sourcelocator,destinationlocator).build().perform();

  moveToElement(): Shifts the mouse pointer to the center of the element

  contextClick(): Performs right-click on the mouse
  action.contextClick(element).build().perform();

  sendKey()--
  WebElement searchbox=driver.findElmenet(xpath);
  action.sendkey(searchbox,"selenium").perform();

  --------------#####------####-------####---------#####----------####-------####-----####----
  Keyboard events:

   Actions action=new Actions(driver);
  1.TAB-->
  action.sendKeys(keys.TAB);

  2.control+All
  // Select the Current Address using CTRL + A
          actions.keyDown(Keys.CONTROL);
          actions.sendKeys("a");

 --------------------------------------------------------------------------------------------------------
                ### PageFactory ###

PageFactory-->
1.Finding web elements using @FindBy
2.PageFactory is a class that implements the Page Object Model design pattern.

Page Factory is a class provided by Selenium WebDriver to support Page Object Design patterns. In Page Factory, testers use @FindBy annotation.
The initElements method is used to initialize web elements.

public BrowserStackHomePage(WebDriver driver) {
this.driver = driver;
PageFactory.initElements(driver, this);
}

PageObject Model-->
1.finding webelements "By"
2.Page Object Model is a design pattern
Page Object Model, also known as POM, is a design pattern in Selenium that creates an object repository for storing all web elements.
It helps reduce code duplication and improves test case maintenance.

-------------------------------------------------------------------------------------------------------
                ### Screenshot ###
 Screenshots also help you when your test case fails so that you can identify what went wrong in your script or your application.
1.we convert webdriver to TakeScreenShot and call getScreenshotAs() method to create an image file by providing the parameter *OutputType.FILE
    //Convert webdriver to TakeScreenshot
    File screenshotFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);

2. we can use this File object to copy the image at our desired location, as shown below, using the FileUtils Class.
    FileUtils.copyFile(screenshotFile , new File("C:\\temp\\screenshot.png));
 --------------------------------------------------------------------------------------------------------------------
            ### Full Screenshot ###-->Ashot
  selenium doesnt have capabilites to take full page screeshot. we have to use a third-party library named "Ashot".
---------------------------------------------------------------------------------------------------------
  Desired Capabilities-->
  In Selenium 3, capabilities were defined in a session by using Desired Capabilities classes.
  As of Selenium 4, you must use the browser options classes. For remote driver sessions, a browser options instance is required as it determines which browser will be used.
ChromeOptions chromeOptions = new ChromeOptions();
	String version = "latest";
	chromeOptions.setBrowserVersion(version);


  DesiredCapabilities are a set of key-value pairs encoded as a JSON object.It helps QAs define basic test requirements such as operating systems,
  browser combinations, browser versions, etc. within Selenium test scripts.

  1. getCapability()-->This method helps in retrieving the capabilities of the current system on which the tests are being performed.
  2. getBrowserName()-->method helps in retrieving the browser name of the current system.
                    public java.lang.String getBrowserName()
  3.setBrowserName();
    This method is used to set the name of the browser on which tests are to be executed.

    public void setBrowserName(java.lang.String browserName)

    public static void main(String[] args) throws Exception {
        DesiredCapabilities caps = new DesiredCapabilities();
        caps.setCapability("browser", "Chrome");
        caps.setCapability("browser_version", "128.0");
        caps.setCapability("os", "Windows");
        caps.setCapability("os_version", "11");
-----------------------------------------------------------------------------------------------------------------------------------
                        ### Alert ###
Alert in Selenium is a message/notification box that notifies the user about some information or asks for permission to perform a certain kind of operation.
It may be used for warning purposes as well.

1.simple alert-->notify the warning message with "ok" button.
2.prompt alert-->alert ask the information to complete the task.
3.confirmation alert-->alert ask confirmation of input like yes or no.

1. cancel button--> driver.switchTo().alert().dismiss();
2.accept button--> driver.switchTo().alert().accept();
3.getText(capture alert message)--> driver.switchTo().alert().getText();
4.sendKeys(send data to alert box)-->driver.switchTo().alert().sendKeys("Ronit");
-------------------------------------------------------------------------------------------------------------
                    ### OOPS concept used in selenium project ###

 WebElement-->interface
 WebDriver-->Interface
 FindBy-->annotation
 FindElement-->"method" in pom to identify webelement

 1.Inheritance--> one class acquires the property of another class.
 We create a Base Class in the Automation Framework to initialize the WebDriver interface, WebDriver waits, Property files, Excels, etc., in the Base Class.
 We extend the Base Class to other classes such as Tests and Utility Class.

 2.Polymorphism-->
 2.1 Method overloading-->"implicit wait"-use different timestamp like sec,min and hrs.
                    Action class and Assert class also example of method overloading

 2.2 Method overrriding-->We use a method which was already implemented in another class by changing its parameters.
                    "get" and "navigate" methods of different drivers in Selenium .

3.Abstraction(POM-locators)--> Page Object Model design pattern, we write locators (such as id, name, xpath etc.,) and the methods in a Page Class. We utilize these locators in tests but we can’t see the implementation of the methods.
 Literally we hide the implementations of the locators from the tests.

4.Interface-->WebDriver driver = new FirefoxDriver();

5.Encapsulation-->ll the classes in a framework are an example of Encapsulation.
In POM classes, we declare the data members using @FindBy and initialization of data members will be done using Constructor to utilize those in methods.
----------------------------------------------------------------------------------------------------------------
                       ### DropDown ###

 Select:-->Select class provides the implementation of the HTML SELECT tag. A Select tag provides the helper methods with select and deselect options
            Select select = new Select();
            WebElement list=driver.findElement(By.id("Xpath"));


  selectByVisibileText(String arg)-->
            select.selectByVisibleText("text");

  selectByIndex(int)-->
            select.selectByIndex();

  getOptions()-->List<WebElement>
            List <WebElement> list=select.getOptions();
            System.out.println(list.size());

selectByValue(String arg)-->
         select.selectByValue("text");

  deselectAll()-->select.deselectAll();

  isMultiple()-->isMultiple(): boolean – This method informs whether the Select element supports multiple selection options at the same time or not.
  This method accepts nothing and returns a boolean value (true/false).
        select.isMultiple();

---------------------------------------------------------------------------------------------------------------------------
                        ### Navigation command ###

1.driver. navigate().to("url") --> command allows the user to launch a new web browser window
2.driver.navigate().refresh()-->refresh current webpage
3.driver.navigate().back()-->come to previous webpage
4.driver.navigate().forward()-->move to the next webpage
----------------------------------------------------------------------------------------------------------
                   ## Data Driven (data extract from excel file)###

//file class for open xlsx file
  File file=new File(excelfilepath);

//create object of fileInputstream  class to read excel sheet
FileInputStream inputstream=new FileInputStream(file);


//creating workbook instance that refers to .xls file
workbook=new HSSFWorkbook(inputStream);

//creating a Sheet object
sheet=workbook.getSheet(sheetName);

public String getCellData(int rowNumber,int cellNumber){
       //getting the cell value from rowNumber and cell Number
        cell =sheet.getRow(rowNumber).getCell(cellNumber);

        //returning the cell value as string
        return cell.getStringCellValue();
    }
---------------------------------------------------------------------------------------------------------
                 ### IMP Questions ###

 1.Window resize-->can we minimize and maximize the window size?
                int width = 600;
                int height = 400;
                Dimension dimension = new Dimension(width, height);
                driver.manage().window().setSize(dimension);

  window.resizeTo() method and capability commands can also be used to achieve the same result.
  Use windows.resizeTo() method along with Javascript executor.
                ((JavascriptExecutor)driver).executeScript("window.resizeTo(600,400);");


  2. How to Handle colors in webdriver?
        "getCSSValue(arg0)"" to fetch the colours by sending the colour as the argument

  3.How to debug the test in Selenium?
  -->using "breakpoints"

  4.typeAndWait-->"typeAndWait" command is used when you finish typing and the software web page begins to reload.

  5.upload files-->element.sendKeys(filepath)-we need to use the HTML tag ‘input’ with the attribute type as a file

   6.how do yo handle dynamic webelemtns in selenium? -->fluent wait and explicit wait..cssSelector

   7.How do you handle situation where an element is not visible(hidden element)?
            Hidden elements are the ones that are present in the DOM but not visible on the web page.
            hidden elements are defined by the CSS property style="display:none;"

            "JavascriptExecutor"-->
             // Javascript executor class with executeScript method
                  JavascriptExecutor j = (JavascriptExecutor) driver;
                   j.executeScript
                        ("document.getElementById('displayed-text').value='Selenium';");
----------------------------------------------------------------------------------------------------------
            ### NoSuchElementException vs StaleElementReferenceExcpetion ###
 1.NoSuchElementException-->Element doesnt exist on webpage
 2.ELementNotVisibleException-->ELment exist but its hidden
 3.






