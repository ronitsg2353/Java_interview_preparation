------------------------------------------------------------------------------------------------------------------------
Selenium cant handle Desktop application.open source for web application

Appium-->mobile application testing

Desktop application-->
Robot Framework-->
WinAppDriver-->
katalon-->
---------------------------------------------------------------------------------------------------------
Selenium Webdriver-->Selenium WebDriver is a code library of APIs for controlling browsers.
Selenium Grid--> Selenium Grid is a smart proxy server that makes it easy to run tests in parallel on multiple machines
Selnoid-->Selenoid is an open-source, automated testing solution that runs browsers in Docker containers
selense-->scripting language-used for writing selenium command
Selenium IDE-->open source having record and playback feature
-----------------------------------------------------------------------------------------------------------
Difference verify and Assert?

verify(soft assertion)-->If the verify condition fails, the test continues to run until the last test is executed.
Assert(hard assertion)-->If the assert condition fails, the test case is marked as failed,
and the remaining tests are skipped
----------------------------------------------------------------------------------------------------------

                ## Selenium Exception ###
 Difference between Invalid Session or NoSession Exception-->

 0.NoSuchSessionException:-->when browser session is no longer active

1.InvalidSessionIDException:-->server does not recognize session identifier and associated user token is no longer authorized or authneticated on platform.

 2.NoAlertPresentException-->Raised when an expected alert is not present. Happens when trying to interact
 with an alert that doesn’t exist.
 solution-->use try-catch block

 3.ElementClickInterceptedException-->raised when an element you try to click is not clickable because another element is blocking it.
solution-->use javaSriptExecutor
 -----------------------------------------------------------------------------------------------------------------------

                   ### waits #####

 Thread.sleep-->Thread.sleep(2000)-->static wait provided by java

 implicit wait-->driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
 WebDriver to wait for a specified amount of time when trying to locate an element before throwing a NoSuchElementException.


Explicit wait--> wait for a specific condition to be true before proceeding further.
It allows you to wait for a particular element or condition with a specific timeout.

 Explicit wait-->WebDriverWait wait = new WebDriverWait(driver,30);
                 wait.until(ExpectedConditions.visibilityOfElementLocated(WebElement);

 Fluent wait-->Fluent wait looking element the wait conditions, such as checking for the condition at regular intervals
 and ignoring certain exceptions

 FluentWait wait = new FluentWait(driver);
 wait.withTimeout(5000, TimeUnit.MILLISECONDS).pollingEvery(250, TimeUnit.MILLISECONDS).ignoring(NoSuchElementException.class)
.until(ExpectedConditions.alertIsPresent());

which wait is better?--> Explicit wait
-------------------------------------------------------------------------------------------------------------------------

                ## JavaScriptExceutor ###
 JavaScriptExecutor is an interface that is used to execute JavaScript through selenium webdriver. JavaScript is a programming language
  that interacts with HTML in a browser, and to use this function in Selenium, JavascriptExecutor is required.

  JavascriptExecutor js = (JavascriptExecutor) driver;
  scroll by-->  js.executeScript(“window.scrollBy(0,150)”);
  get title--> string sText =  js.executeScript(“return document.title;”).toString();
  inner text of webpage-->string sText =  js.executeScript(“return document.documentElement.innerText;”).toString();
  alert poput window--> Js.executeScript(“alert(‘hello world’);”);

  ----------------------------------------------------------------------------------------------------------------------
                    findElement() and findElements()?
  findElement()-->method which finding out webelement of webpage and return noELmentfoundExption for no webelement.
  findElements()-->method which finding out mutliple element of webpage and return zero element for no webelment.
  ---------------------------------------------------------------------------------------------------------------------------
               Diff between getWindowHandle and getWindowHandles ?

  It is a unique identifier that holds the address of all the windows. Think of it as a pointer to a window, which returns the string value.
  It is assumed that each browser will have a unique window handle.

  getWindowHandle-->This method helps to get the window handle of the current window
                    String parentWindow=driver.getWindowHandle();

  getWindowHandles-->This method helps to get the handles of all the windows opened
                    String <set> allwindows=driver.getWindowHandles();

  switch to: This method helps to switch between the windows
  action: This method helps to perform certain actions on the windows
  ---------------------------------------------------------------------------------------------------------
                     ### Action class ###

  Action-->Interface
  Actions-->class

  Actions class is an ability provided by Selenium for handling keyboard and mouse events

  Actions action=new Actions(driver);
  action.moveToElement(element).build().perform();
  click()-->    action.click(element).build().perform();


  Mouse Actions in Selenium:

  doubleClick(): Performs double click on the element
  action.doubleClick(element).perform();

  clickAndHold(): Performs long click on the mouse without releasing it
  action.clickAndHold(element).perform();

  dragAndDrop(): Drags the element from one point and drops to another
  action.dragAndDrop(sourcelocator,destinationlocator).build().perform();

  moveToElement(): Shifts the mouse pointer to the center of the element

  contextClick(): Performs right-click on the mouse
  action.contextClick(element).build().perform();

  sendKey()--
  WebElement searchbox=driver.findElmenet(xpath);
  action.sendkey(searchbox,"selenium").perform();

  --------------#####------####-------####---------#####----------####-------####-----####----
  Keyboard events:

   Actions action=new Actions(driver);
  1.TAB-->
  action.sendKeys(keys.TAB);

  2.control+All
  // Select the Current Address using CTRL + A
          actions.keyDown(Keys.CONTROL);
          actions.sendKeys("a");

 --------------------------------------------------------------------------------------------------------
                ### PageFactory ###

PageFactory-->
1.Finding web elements using @FindBy
2.PageFactory is a class that implements the Page Object Model design pattern.

Page Factory is a class provided by Selenium WebDriver to support Page Object Design patterns. In Page Factory, testers use @FindBy annotation.
The initElements method is used to initialize web elements.

public BrowserStackHomePage(WebDriver driver) {
this.driver = driver;
PageFactory.initElements(driver, this);
}

PageObject Model-->
1.finding webelements "By"
2.Page Object Model is a design pattern
Page Object Model, also known as POM, is a design pattern in Selenium that creates an object repository for storing all web elements.
It helps reduce code duplication and improves test case maintenance.

-------------------------------------------------------------------------------------------------------
                ### Screenshot ###
 Screenshots also help you when your test case fails so that you can identify what went wrong in your script or your application.
1.we convert webdriver to TakeScreenShot and call getScreenshotAs() method to create an image file by providing the parameter *OutputType.FILE
    //Convert webdriver to TakeScreenshot
    File screenshotFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);

2. we can use this File object to copy the image at our desired location, as shown below, using the FileUtils Class.
    FileUtils.copyFile(screenshotFile , new File("C:\\temp\\screenshot.png));
 --------------------------------------------------------------------------------------------------------------------
            ### Full Screenshot ###-->Ashot
  selenium doesnt have capabilites to take full page screeshot. we have to use a third-party library named "Ashot".
---------------------------------------------------------------------------------------------------------
  Desired Capabilities-->
  In Selenium 3, capabilities were defined in a session by using Desired Capabilities classes.
  As of Selenium 4, you must use the browser options classes. For remote driver sessions, a browser options instance is required as it determines which browser will be used.
ChromeOptions chromeOptions = new ChromeOptions();
	String version = "latest";
	chromeOptions.setBrowserVersion(version);


  DesiredCapabilities are a set of key-value pairs encoded as a JSON object.It helps QAs define basic test requirements such as operating systems,
  browser combinations, browser versions, etc. within Selenium test scripts.

  1. getCapability()-->This method helps in retrieving the capabilities of the current system on which the tests are being performed.
  2. getBrowserName()-->method helps in retrieving the browser name of the current system.
                    public java.lang.String getBrowserName()
  3.setBrowserName();
    This method is used to set the name of the browser on which tests are to be executed.

    public void setBrowserName(java.lang.String browserName)

    public static void main(String[] args) throws Exception {
        DesiredCapabilities caps = new DesiredCapabilities();
        caps.setCapability("browser", "Chrome");
        caps.setCapability("browser_version", "128.0");
        caps.setCapability("os", "Windows");
        caps.setCapability("os_version", "11");
-----------------------------------------------------------------------------------------------------------------------------------
                        ### Alert ###
Alert in Selenium is a message/notification box that notifies the user about some information or asks for permission to perform a certain kind of operation.
It may be used for warning purposes as well.

1.simple alert-->notify the warning message with "ok" button.
2.prompt alert-->alert ask the information to complete the task.
3.confirmation alert-->alert ask confirmation of input like yes or no.

1. cancel button--> driver.switchTo().alert().dismiss();
2.accept button--> driver.switchTo().alert().accept();
3.getText(capture alert message)--> driver.switchTo().alert().getText();
4.sendKeys(send data to alert box)-->driver.switchTo().alert().sendKeys("Ronit");












