---------------------------------------------------------------------------------------------------------
                ### Variables ###

1.Global variable-->Global variables are available throughout a workspace
2.collection variable-->collection variables are available throghout a collection
3.Enviorment variable-->only available for active environment
4.Local variable-->Local variable values are scoped to a single request or collection run, and are no longer available when the run is complete
------------------------------------------------------------------------------------------------------

Authentication & Authorization==>
1.Authentication--> verify that user is valid or not
2.Authorization-->   give permission to user after authentication

Types of Authorization-->
1.Basic-->
2.Digest-->
3.Preemptive-->
4.Bearer Token-->
        OAuth1.0
        OAuth2.0
        API KEy

 HTTP Request--> Get,post,Put,Patch,delete

 RestAssured-->using gherking keyword-->Given,when ,then
---------------------------------------------------------------------------------------------------------
              ### API chaining ###

The API chaining method is to create a sequence of API calls where the output of one API request is used as the input for the next.
 The technique is an automated and efficient way of executing a Multistep Process.

-----------------------------------------------------------------------------------------------------------
            ### Serialization & Deserialization ###

POJO-->Plain Old java object-- class is a Java object that can be used in REST Assured to serialize and deserialize requests and responses.

Serialization-->POJO to json
Deserialization-->json to POJO
----------------------------------------------------------------------------------------------------------
            ### Different ways of post Request ###
 1.HashMap-->
                public void createStudentRecord(){
                HashMap data=new HashMap<>():
                data.put("Name","Scott");
                data.put("location","Pune");
                String coursearr[]={"C","JAva"};
                data.put("course","coursearr");
                }


 2.using org.json-->add org.json library
                public void testPostJsonLibrary(){
                JSONObject data=new JSONObject();
                data.put("name","Ronit");
                data.put("location","pune");
                }

 3.POJO class-->Encapsulation(getter n setter)--create separate class for POJO

                public class POJORequest{

                String name;
                String location;


                public String getName(){
                return name;
                }

                public void setName(String name){
                this.name=name;
                }

                public String getLocation(){
                return location;
                }

                public void setLication(String location){
                this.location=location;
                }
                }

                public void POStusingPOJO(){
                POJORequest data=new POJORequest();
                data.getName("ROnit"):
                data.getLocation("Pune");


 4.using external json file-->

 public void testPostExjsonFile(){
 File file=new File("filepath");
 FileReader fr=new FileReader(file);
 JSONTOkener jt=new JsonTokener(fr);
 JSONObject data =new JSONobject(jt);

 }

 RestAssured.given().baseURI().content-type().header().body(data).when().post().then().log().all();
 ----------------------------------------------------------
                ### Path parameter & Query Parameter ###

Path parameter-->The path parameter defines the resource location. The path parameter is separated from the URL by a `/`
Query Parameter-->API Query parameters can be defined as the optional key-value pairs that appear after the question mark in the URL.
                query parameter(s) by a question mark (`?`).
---------------------------------------------------------------------------------------------------------------------
                ### capture the response ###

                extrect().response()-->used to retreive response

Response response=RestAssured.given().content-type("application/json").body(data).when().Post().then().statusCode(200).extract().response();

-------------------------------------------------------------------------------------------------------
                ### Fetch data from response ###

 JSonPath js=new JSonPath(response);
 System.out.println(js.getString("id"));
 int id=js.getString("Id");
 -------------------------------------------------------------------------------------------------------
                    ### retireve cookies from response ###

 Map <String,String> cookies=response.getCookies();
 System.out.println(cookies.size());
 ----------------------------------------------------------------------------------------------------------
                    ### retreive Headers from response ###

  Header header=response.getHeader();
  for(header hd:headers){
  System.out.println(hd.getName()+" "+hd.getValue()):
  }
  --------------------------------------------------------------------------------------------------------
                ### converting response into jsonObject ###

 JsonObject jo=new JsonObject(response.toString);
 for(int i=0;i<jo.getJSonArray("first name").length();i++){
 String firstname=jo.getJSONArray("first name").getJsonObject(i).get("first name").toString();
 System.out.println(firstname);
 }

 ---------------------------------------------------------------------------------------------------------
                ### FIle upload ###-->mutli part

  public void fileUpload(){

  File file=new File("filepath");

  RestAssured.given().multiPart("file",file).content-type("multiPart/form-data").when().post(baseurl).then().statusCode().log().all();
  }
  ---------------------------------------------------------------------------------------------------------------------------------------
                  ### JsonArray to JsonObject ###

  JSONArray jarr=new JSONArray(response.toString());
  jarr.getJSONObject().get("first name");
  ---------------------------------------------------------------------------------------------------------
                    ### Dummary Test Data ###

      "Javafaker"-->maven dependency

     Faker fakedata=new Faker();
     String name=fakedata.name.fullName();
     String firstname=fakedata.name.firstname();



 -----------------------------------------------------------------------------------------------------------
                  ## Data Driven (data extract from excel file)###

//file class for open xlsx file
  File file=new File(excelfilepath);

//create object of fileInputstream  class to read excel sheet
FileInputStream inputstream=new FileInputStream(file);


//creating workbook instance that refers to .xls file
workbook=new HSSFWorkbook(inputStream);

//creating a Sheet object
sheet=workbook.getSheet(sheetName);

public String getCellData(int rowNumber,int cellNumber){
       //getting the cell value from rowNumber and cell Number
        cell =sheet.getRow(rowNumber).getCell(cellNumber);

        //returning the cell value as string
        return cell.getStringCellValue();
    }

 ---------------------------------------------------------------------------------------------------------
                    ### Rest-Assured Framework ###


  src/main/java
  src/main/resources
  src/test/java-->
  --------------------------------------------------------------------------------------------------------------
  How will you validate an API rqst if VPN is required for it to work?

