---------------------------------------------------------------------------------------------------------
Epresentational State Transfer (REST) is an architectural style that defines a set of constraints to be used for creating web services.
 REST API is a way of accessing web services in a simple and flexible way without having any processing.

-----------------------------------------------------------------------
Q.How to handle Dynamic Payload in rest assured?

-->1.use testng parametrization or data provider
    2.handle the dynmic payload-->1.java string manipulation
                                   2.using hashMap
                                   3.using Json Library
                                   4.using pojo class
                                   5.using external file(json files)
-----------------------------------------------------------------------------------------------
API-->Application Programming Interface (API) is useful for communication between different software systems. It acts as an interface between two applications
and allows two software systems to communicate with one another.



Put-->replace the entire resource
Patch-->partially replace the resource

------------------------------------------------------------------------------------------------
                    ### Status code ###

2XX-->SUCESS
1.200-->OK-->the request was succesful & response contains the requested data.
2.201-->created-->the request was succesful & resulted in creation of new resource.
3.202-->Accepted-->the request has been accepted for processing but not yet completed.
4.203-->No authoritive info-->
5.204-->no content-->the server has received the initiate part of request and client should proceed

4XX-->Client error
1.400-->Bad Request-->The server cannot understand the request due to bad syntax
2.401-->unauthroized-->The request requires authentication and the client has not provide valid credential
3.402-->Payment required
3.403-->Forbidden-->the server understood the request but client doesnt have permission to access resource
4.404-->NOt Found-->the requested resource could not found on the server.

5XX-->Server error
1.500-->Internal Server error-->an unexpected condition was encountered by server preventing it from fulfilling request
2.501-->Not implemented
2.502-->Bad Gateway-->the server acting as gateway recieved an invalid response from upstream server
3.503-->Service unavailable-->the server currently unable to handle the request due to temp overload
4.504-->Gateway timeout-0>server acting as gateway no reciecely timely response from upstream server

---------------------------------------------------------------------------------------------------------
                        ### Attribute ###

                        ###Header Attributes###(key value pair)

 1.content-Type-->application/json(json data)
                --->application/x-www-form-urlencoded(for form data)
                -->multipart/form-data(for file uploads)

 2.Authorization-->
                -->Bearer Token (OAuth token)
                -->Basic ()
 3.Accept-->
                -->application/json
 4.Host-->domain name of server
 5.Content-Length-->specific size of request body
 6.Cookie-->send cookies stored in browser or client to the server
 7.X-Request-ID-->a unique indentifier for tracking request
 8.Cache-Control-->no-chache
 9.Custom Headers-->headers specific to API or services...X-customer-Header:value




--------------------------------------------------------------------------------------------------------------
              ### Variables ###

1.Global variable-->Global variables are available throughout a workspace
2.collection variable-->collection variables are available throghout a collection
3.Enviorment variable-->only available for active environment
4.Local variable-->Local variable values are scoped to a single request or collection run, and are no longer available when the run is complete
------------------------------------------------------------------------------------------------------

Authentication & Authorization==>
1.Authentication--> verify that user is valid or not
2.Authorization-->   give permission to user after authentication

Types of Authentication->
0.JWT-->token that contains base64 encoded JSON.
1.Basic-->basic method of authorization ..provide usename & password
2.Digest-->similar like basic but having "MD5" algorithm
4.Bearer Token-->a security token for grant the access
5.API Key-->Key and value pair ..add to request header
6.OAuth1.0-->(HMAC_SHA1 or RSA) allow user on one site to another site without sharing client credentials.secure but more complex
oauth 1.0 is secure but complex authorization protocol that uses "cryptographic signatures" for authenticate API access.

7.OAuth2.0--->(HTTPS)flexbile and simplified framework for granting delegated access to resources using tokens.

OAUth 1.0 and Outh 2.0 difference-->
1.Oauth1 uses cryptographic methd(HMAC_SH! or RSA) or Oauth2.0 relies on HTTPS for security using bearer token for access
2.OAuth1 is more complex -OAUth 2 is simpler
3.OAuth1 ->token are opaque and alway requires signature & OAuth 2.0 token arevJWTs or bearer token ahich is easier to handle.

 HTTP Request--> Get,post,Put,Patch,delete

 RestAssured-->using gherkin keyword-->Given,when ,then
---------------------------------------------------------------------------------------------------------
              ### API chaining ###

The API chaining method is to create a sequence of API calls where the output of one API request is used as the input for the next.
 The technique is an automated and efficient way of executing a Multisteps Process.

-----------------------------------------------------------------------------------------------------------
            ### Serialization & Deserialization ###

POJO-->Plain Old java object-- class is a Java object that can be used in REST Assured to serialize and deserialize requests and responses.

Serialization-->POJO to json
Deserialization-->json to POJO
----------------------------------------------------------------------------------------------------------
            ### Different ways of post Request ###
 1.HashMap-->
                public void createStudentRecord(){
                HashMap data=new HashMap<>():
                data.put("Name","Scott");
                data.put("location","Pune");
                String coursearr[]={"C","JAva"};
                data.put("course","coursearr");
                }


 2.using org.json-->add org.json library
                public void testPostJsonLibrary(){
                JSONObject data=new JSONObject();
                data.put("name","Ronit");
                data.put("location","pune");
                }

 3.POJO class-->Encapsulation(getter n setter)--create separate class for POJO

                public class POJORequest{

                String name;
                String location;


                public String getName(){
                return name;
                }

                public void setName(String name){
                this.name=name;
                }

                public String getLocation(){
                return location;
                }

                public void setLication(String location){
                this.location=location;
                }
                }

                public void POStusingPOJO(){
                POJORequest data=new POJORequest();
                data.getName("ROnit"):
                data.getLocation("Pune");


 4.using external json file-->

 public void testPostExjsonFile(){
 File file=new File("filepath");
 FileReader fr=new FileReader(file);
 JSONTOkener jt=new JsonTokener(fr);
 JSONObject data =new JSONobject(jt);

 }

 RestAssured.given().baseURI().content-type().header().body(data).when().post().then().log().all();
 ----------------------------------------------------------
                ### Path parameter & Query Parameter ###

Path parameter-->The path parameter defines the resource location. The path parameter is separated from the URL by a `/`
Query Parameter-->API Query parameters can be defined as the optional key-value pairs that appear after the question mark in the URL.
                query parameter(s) by a question mark (`?`).
---------------------------------------------------------------------------------------------------------------------
                ### capture the response ###

                extrect().response()-->used to retreive response

Response response=RestAssured.given().content-type("application/json").body(data).when().Post().then().statusCode(200).extract().response();

-------------------------------------------------------------------------------------------------------
                ### Fetch data from response ###-->create a object of jsonpath

 JSonPath js=new JSonPath(response);
 System.out.println(js.getString("id"));
 int id=js.getString("Id");
 -------------------------------------------------------------------------------------------------------
                    ### retireve cookies from response ###

 Map <String,String> cookies=response.getCookies();
 System.out.println(cookies.size());
 ----------------------------------------------------------------------------------------------------------
                    ### retreive Headers from response ###

  Header header=response.getHeader();
  for(header hd:headers){
  System.out.println(hd.getName()+" "+hd.getValue()):
  }
  --------------------------------------------------------------------------------------------------------
                ### converting response into jsonObject ###

 JsonObject jo=new JsonObject(response.toString);
 for(int i=0;i<jo.getJSonArray("first name").length();i++){
 String firstname=jo.getJSONArray("first name").getJsonObject(i).get("first name").toString();
 System.out.println(firstname);
 }

 ---------------------------------------------------------------------------------------------------------
                ### FIle upload ###-->mutli part

  public void fileUpload(){

  File file=new File("filepath");

  RestAssured.given().multiPart("file",file).content-type("multiPart/form-data").when().post(baseurl).then().statusCode().log().all();
  }
  ---------------------------------------------------------------------------------------------------------------------------------------
                  ### JsonArray to JSONObject ###

  JSONArray jarr=new JSONArray(response.toString());
  jarr.getJSONObject().get("first name");
  ---------------------------------------------------------------------------------------------------------
                    ### Dummary Test Data ###

      "Javafaker"-->maven dependency

     Faker fakedata=new Faker();
     String name=fakedata.name.fullName();
     String firstname=fakedata.name.firstname();

 -----------------------------------------------------------------------------------------------------------
                  ## Data Driven (data extract from excel file)###

//file class for open xlsx file
  File file=new File(excelfilepath);

//create object of fileInputstream  class to read excel sheet
FileInputStream inputstream=new FileInputStream(file);


//creating workbook instance that refers to .xls file
workbook=new HSSFWorkbook(inputStream);

//creating a Sheet object
sheet=workbook.getSheet(sheetName);

public String getCellData(int rowNumber,int cellNumber){
       //getting the cell value from rowNumber and cell Number
        cell =sheet.getRow(rowNumber).getCell(cellNumber);

        //returning the cell value as string
        return cell.getStringCellValue();
    }

 ---------------------------------------------------------------------------------------------------------
                    ### Rest-Assured Framework ###


  src/main/java
  src/main/resources
  src/test/java-->
  --------------------------------------------------------------------------------------------------------------
  How will you validate an API request if VPN is required for it to work?

