Priority-->the priority attribute tells the test automation framework the order in which to execute test cases
invocation count--> an annotation that specifies how many times a test method should be executed
disabled--> @Test(enabled=false)--
dependsOnMethod-->
dataprovider-->
Test-->

-----------------------------------------------------------------------------------------------------

BeforeSuite-->method will be run before all tests in this suite have run.
AfterSuite--> method will be run after all tests in this suite have run
BeforeTest-->method will be run before any test method belonging to the classes inside the <test> tag is run.
AfterTest-->method will be run after all the test methods belonging to the classes inside the <test> tag have run.
BeforeGroup-->The list of groups that this configuration method will run before. This method is guaranteed to
 run shortly before the first test method that belongs to any of these groups is invoked.

AfterGroup-->The list of groups that this configuration method will run after. This method is guaranteed to run shortly
 after the last test method that belongs to any of these groups is invoked.

BeforeClass-->method will be run before the first test method in the current class is invoked.
AfterClass-->method will be run after all the test methods in the current class have been run.
AfterMethod-->method will be run before each test method.
BeforeMethod-->method will be run after each test method.
--------------------------------------------------------------------------------------------------------
                            ### Data Provider ###

Parametrization-->
execution strategy that runs a test case automatically multiple times with various input values.
Dataprovider uses the read the hard -coded data


return type of Dataprovider-->Array (2D) object

 Dataprovider--> DataProvider helps with data-driven test cases that carry the same methods
  but can be run multiple times with different data sets.

@DataProvider (name = "name_of_dataprovider")
public Object[][] dpMethod() {
    return new Object [][] { values}
}

-----------------------------------------------------------------------------------------------------------
                ### Listeners ###
Listener is an interfaces that can track events and modify system behavior during the execution of Selenium tests.

  1.IRetryAnalyzer--> rerun the failed tests
  2.ITestListener-->allows us to implement methods to listen to test events, such as when a test case starts, finishes, fails, or skips
  3.IReporter-->report generation
  ----------------------------------------------------------------------------------------------------------------------------
                ### testng.xml ###
   <?xml version="1.0" encoding="UTF-8"?>
   <!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
   <suite name="Parallel Test Suite" thread-count="2" parallel="tests" >
   <test name="Parallel Test Chrome" >
   <classes>
   <class name="com.qa.testcases.ChromeTest"/>
   </classes>
   </test> <!-- Test -->

   <test name="Parallel Test Firefox" >
   <classes>
   <class name="com.qa.testcases.FirefoxTest"/>
   </classes>
   </test> <!-- Test -->

   <test name="Parallel Test Edge" >
   <classes>
   <class name="com.qa.testcases.EdgeTest"/>
   </classes>
   </test> <!-- Test -->
   </suite> <!-- Suite -->
   -----------------------------------------------------------------------------------------
   1.What does ThreadPoolSize mean in TestNG? How does it work?