                    ##### Junit ####
------------------------------------------------------------------------------------------------------------------------
latest version of junit-->Junit 5

Feature of Junit 5-->
-----------------------------------------------------------------------------------------------------------
                    ### Junit Framework ###







------------------------------------------------------------------------------------------------------------------------
Annotation of Junit-->

@Test-->(test case)--This annotation is a replacement of org.junit.TestCase which indicates that public void method to which it is attached can be executed as a test Case.
@Before-->(precondn-Execution before each test case)--This annotation is used if you want to execute some statement such as preconditions before each test case.
@After-->(postcondtn-Execution after each test case)-This annotation can be used if you want to execute some statements after each Test Case for e.g resetting variables, deleting temporary files ,variables, etc.
@BeforeClass-->(execution before all test case)-- his annotation is used if you want to execute some statements before all the test cases for e.g. test connection must be executed before all the test cases.
@AfterClass-->(Execution after all test case)--This annotation can be used if you want to execute some statements after all test cases for e.g. Releasing resources after executing all test cases.
@Ignores-->disabling some test cases during test execution.
@Test(timeout=500)-->  test execution need to be completed within some specified time.
@Test(expected=IllegalArgumentException.class)-->f you want to handle some exception during test execution. For, e.g., if you want to check whether a particular method is throwing specified exception or not.

------------------------------------------------------------------------------------------------------------------------
Assertion in Junit-->Assert class having different assert methods

Assert assert=new Assert();

1.assertEqual-->assertEquals compares the values of different data types, such as string, integer, double, object, etc.,
assert.assertEqual(expected,actual);

2.assertSame-->assertSame() method verifies reference of two object
assert.assertSame(Object expected,Object actual);

3.assertNotEqual--> Asserts that the expected values and the actual values are not equal.
assert.assertNotEqual(expected,actual);

4.assertTrue(condition)-->This asserts whether the given condition is true. Test case passes if it's true and fails if not.

5.assertFalse(condition)-->This asserts whether the given condition is false. Test case passes if it's false and fails if not.

6.assertNull-->
7.assertNotNull-->
-------------------------------------------------------------------------------------------------------------






------------------------------------------------------------------------------------------------------------------------



DataProvider-->
------------------------------------------------------------------------------------------------------------------------