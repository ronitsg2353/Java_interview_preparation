                    ####   Java Interview Question ####
--------------------------------------------------------------------------------------------------
                    ### Diff betn Encapsulation and Abstraction ###

 Abstraction  hide "implementation details" but encsapsultion hides "data"    by restricted access.
------------------------------------------------------------------------------------------
latest version of Java--:Java 23
------------------------------------------------------------------------------------------------------------
class-->collection of objects having same properties
object-->physical entity having state and behaviour.
method-->set of instruction to perform specific task
------------------------------------------------------------------------------------------------------
Typecasting-->converting one datatype to another datatype

widening--> int to double
narrowing-->double to int

upcasting-->typecasting chid class object  to parent class object
downcasting--> typecasting parent class to child class object

---------------------------------------------------------------------------------------------------------]
Wrapper class-->its convert primitive datatype into object & object into primitive datatype.
autoboxing-->convert primitive datatype to object
unboxing-->convert object to primitive datatype
---------------------------------------------------------------------------------------------------------
                ### Final,Finally & Finalize ###

Final-->keyword/access modifier-use to apply restriction to class,method and variable.
Finally-->use in try-catch block-necessary code exceute either exception handled or not
Finalize-->method in Java which is used to perform clean up processing just before object is garbage collected
------------------------------------------------------------------------------------------------------

Break-->break statement in java is used to terminate from the loop immediately.inside the loop
continue-->
The continue statement is used to skip the current iteration of the loop..We can not use a continue with the switch statement.
----------------------------------------------------------------------------------------------------------
==> public static void main (String [] args)

public--> access modifier-Making the main() method public makes it globally available.
static(keyword)-->JVM can invoke it without instantiating the class.(no required of object )
void--> method not return anything
main-->starting point of Execution for JVM
(String [] args)--> method having string ,array and argument inside

Main method override-->No
main method overload-->Yes
=================================================================================================================
                ### Access Modifier ###

public--> everywhere like package/outside package/class/outside class
protected-->accessible for class/outside class/package/outside package with help of child class
private -->accesible only within class only..no outside class
Default--> only for package-no outside package

Singleton class--> class having only one object.
===================================================================================================================
Constructor==>
----###code-#########--------------------------------------------------
// Create a Main class
public class Main {
  int x;  // Create a class attribute

  // Create a class constructor for the Main class
  public Main() {
    x = 5;  // Set the initial value for the class attribute x
  }

  public static void main(String[] args) {
    Main myObj = new Main(); // Create an object of class Main (This will call the constructor)
    System.out.println(myObj.x); // Print the value of x
  }
}
---------------------------------------------------------------------------------------------------------------------
A constructor in Java is a special method that is used to initialize objects.
The constructor is called when an object of a class is created.
the constructor name must match the class name, and it cannot have a return type (like void).
Also note that the constructor is called when the object is created.
All classes have constructors by default: if you do not create a class constructor yourself, Java creates one for you.

#Type of constructor#-->
Default constructor: A constructor that does not accept any parameters.
Parameterized constructor: A constructor that accepts a specific number of parameters.
Copy constructor: A constructor that creates a duplicate of an existing object of a class.


can we override constructor like method-->No
can we overload the constructor-->Yes.

constructor overloading-->is feature of java that allows a class to have multiple constructors,
each with a different set of parameters

------------------------------------------------------------------------------------------------------------
Instance method & static method-->

1.Instance method-->its required object of class
2.Static method-->its doesn't requires object of class.Accessible for only static attribute.

Static method-->Static methods are the methods in Java that can be called without creating an object of class


1.can we override static method-->No
2.can we overload static method-->Yes.
===========================================================================================================================
                ### Polymorphism ###

poly means many and morph means form--?
one object showing many forms at different states.


                    # Method overloading & overriding ###

  Both are type of polymorhphism

 1.Method overloading-->compile time polymorphism
 2.Method overloading-->static binding

 code-->  class methodoverload{
 static int add(int a,int b){
 return a+b;
 }

 static int add(int a,int b,int c){
 return a+b+c;
}
public static void main(String []args){
System.out.println(add(10,20));
System.out.println(add(10,20,30));
}
}

-----Method overloading-->more than one method shares the same method name with a different parameter in the class.
return type some or may not same.

----Method overriding--->----------------->

code==>

 2.Method overriding-->runtime polymorphism
 Method overriding-->dynamic binding

 Method overriding(child class having a method already present in parent class)-->same method and same signature.
 method in a derived class has the same name, return type, and parameters
  as a method in its parent class.
  [[while method overriding involves creating a method in the child class
  that has the same name, parameters, and return type as a method in the parent class.]]

//base class
 public class Animal{
 public void eat(){
 System.out.println("Eating is method");
}
//Derived class
public class Dog extends Animal(){
void eat(){
System.out.println("Eating for derived method");
 }

  // Method to call the base class method
     void eatAsAnimal() {
         super.eat();
     }

 public static void main(String []args){
 Animal animal=new Animal();
 animal.eat();

 Dog dog=new Dog();
 dog.eat();

 Animal animal=new Dog();
 animal.eat();
 }
 -------------------------------------------------------------------------------------------------------------
                                ### String ###

   String is an Non primitive datatype & object that represents a sequence of characters
   String is an immutable class which means a constant and cannot be changed once created and if wish to change ,
    we need to create an new object

   # how to create new String:
   1.literal-->
   2.new keyword-->

   StringBuffer-->
    StringBuffer is a peer class of String, it is mutable in nature and it is thread safe
            ex.StringBuffer demoString = new StringBuffer("GeeksforGeeks");

  StringBuilder-->
  StringBuilder in Java represents an alternative to String and StringBuffer Class,
   as it creates a mutable sequence of characters and it is not thread safe.

   Ex.StringBuilder demoString = new StringBuilder();
   demoString.append("GFG");

   String methods:
   1.charAt()-->return character of specific index
   2.concat()-->combine two string
   3.equals()-->compare two string
   4.equalsIgnoreCase()-->compare two string.without caseSensitivity
   5.length()-->size of string
   6.split()-->splits string into a array of substring
   7.substring()-->return new string
   8.toCharArray()-->convert string into new character array
   9.toLowerCase()-->convert into lowecase
   10.toUpperCase()-->convert into uppercase
   11.trim()-->remove whitespace of both end of string
   12.ValueOf()-->
   -----------------------------------------------------------------------------------------------
                    ### Array ###(Arrays class)--> java.util.Arrays;

                    Array is non primitive data type
    Arrays are fundamental structures in Java that allow us to store multiple values of the same type in a single variable
     They allow you to store and manipulate collections of data efficiently
     all arrays are dynamically allocated.
     Arrays may be stored in contiguous memory Allocation
     The variables in the array are ordered, and each has an index beginning with 0.

     Type of Array-->
     1.one dimenional array-->
     int [] arrays={12,4,21,56,21};

     2.Two Dimesnional array-->
     int [][] arrays={{1,2,4,},{3,4,21}};



    ## Array methods-->
    1.length-->
    2.compare-->
    3.equal-->

 ------------------------------------------------------------------------------------------------
                    ### Abstraction ###

 Abstraction==> OOPs concept-hiding the unnecessary details from user and show only functionality.

 Abstract class & Abstract Method:
Abstract method--> using abstract keyword in abstract class.A method don't have implementation body.
concrete method-->method having implementation body

Abstract class--> both abstract and concrete method.its restricted class and its cannot user for create obj

Abstract Animal{

public void abstract dog();//abstract method

public void sheep(){//concrete method
System.out.printn("Sheep is name of animal");

}
---------------------------------------------------------------------------------------------------------\
Interface:

interface Animal{
void eat(): //abstract method
void sleep(); //abstract method
}
Interface-->
An interface is declared by using the interface keyword. It provides total abstraction;
 means all the methods in an interface are declared with the empty body, and all the fields are public, static and final by default.
A class that implements an interface must implement all the methods declared in the interface.

[[An interface in Java looks similar to a class but both the interface and class are two different concepts.
An interface can have methods and variables just like the class but the methods declared in interface are by default abstract. W
e can achieve 100% abstraction and multiple inheritance in Java with Interface]]

The "implements" keyword is used to implement an interface

------------------------------------------------------------------------------------------------------
                ### Marker interface & Functional Interface ###

 1.Marker interface-->interface having no method..its use for metadata about class
 2.Functional interface-->interface contain single abstract method and can have multiple static and default methods

 -----------------------------------------------------------------------------------------------------------
 Difference between Argument and parameter==>

Parameter(declared var in function)-->
Parameters refer to the variables listed in a function's declaration,defining the input that the function can accept.

 def fun sum(x,y):
 return x+y

 Argument--->
 Arguments are the actual values passed to the function when it is called,filling the parameters during execution.

 result = add(5, 3)

--------------------------------------------------------------------------------------------------------------

throw--->throw is keyword is used to throw an exception explicitly by programmer.we can defined user defined exception.

throws--->java throws keyword is used to declared an exception.they might give a exception so use to try n catch

finally--> finally block contains the code which is always executed whether the exception is handled or not.

this--> refer current class instance variable

super-->super keyword in Java is a reference variable which is used to refer immediate parent class object.
----------------------------------------------------------------------------------------------------------
                  ###  Exception and Exception Handling ###

 Exception--> event that occurs during the execution of a program that disrupts the normal flow of instructions
 Exception Handling-->mechanism to handle the runtime errors so that the normal flow of the application can be maintained

 checked Exception(compile time Exception)-->checked at compiletime by java--IOException,SQLException,ParseExceeption
 unchecked Exception(runtime exception)-->unchecked at compile time by java--NUllpointerExeption,ArrayIndexoutofbound Excpetion,Arithmetic Exception
 Error--> exceptional conditions that are typically beyond the control of the application and are not meant to be caught or handled by application code.
           OutofMemoryError,stackoverflowError,NoclassDefFoundError etc.

try-->keyword.use to specify exception code .we cant use try block alone.try always comes with catch or finally
catch-->catch is handle the exception
finally-->excecute the neccesary code either exception handled or not
throw-->used by dev to user  defined exception
throws-->use for delcared the exceptions.

Nested try-catch block-->
Sometimes a situation may arise where a part of a block may cause one error and the entire block itself may cause another error.
-------------------------------------------------------------------------------------------------------------------
                    ### Collection Framework ###


List-->duplicate elements and multiple null values
       1.Arraylist-->dynamic element with random access.
       2.LinkedList-->doubly linked list--->faster insertion n delete
       3.vector-->similar version of arraylist--Thread safe and synchronized


Set-->no duplicate element and only one null value
         HashSet-->unique items
         LinkedHashSet-->unique item allows null elements
         TreeSet-->element sorted in ascending order
         SortedSet-->also stored elements in ascending order


Queue-->first -in- first-out --perform operation on both sides
               PriorityQueue-->no null value
               Deque-->Deques means "double ended queue"-->perform operation on both side
               ArrayDeque-->can add or delete the elements on both sides.


Map-->key.value pair-->no duplicate keys allowed but duplicate values
                Hashmap and LinkedHashMap-->allows null keys and value
                Treemap-->doesn't allow any null key or value

 HashTable(class)-->Map key -value pair--> no null value or keys

 Difference between HashMap and HashTable-->
 hashmap is non synchronized making its faster for single threaded tasks,
 HashTable is synchronized  and providing thread-safety

------------------------------------------------------------------------------

 List(interface)-->we can store all the ordered collections of the objects.Its allows duplicate data.
                    List implemented by classes like Arraylist,LinkedList,vector,stack & Queue

1.Arraylist(class)--(insertion order-storing and accesing data)-->provides with dynamic arrays in Java.Allows the duplicate data.
                    List <String >al=new ArrayList();
                                    al.add("Ronit");
                                    al.add("Ronit");//accept the duplicate value
                                    al.remove("Ronit");


2.LinkedList(class)--(insertion order-manipulating data)-->allows duplicate data
3.vector(class)-->similar like arrylist--dyanmic array-store the duplicate element
4.stack(class)-->subclass of vector-->
               ____
              | 4   |---> Last in first out
              -----
              |  3  |
              ------
              | 2   |
              ------
              |  1  |
              ------

5.Queue(Interface)-->first in first out--ordered list
It can be defined as an ordered list that is used to hold the elements which are about to be processed
         -----------------------------------
        |   1    |   2    |   3    |   4   |
        |________|________|________|_______|

Priority Queue-->doesn't allow null element. It holds the elements or objects which are to be processed by their priorities

Queue<String> q1 = new PriorityQueue();
               q1.add("Ronit");
               q1.remove("Ronit");
               q1.poll();
Queue<String> q2 = new ArrayDeque();

Set(interface)-->represents the unordered set of elements which doesn't allow us to store the duplicate items.
We can store at most one null value in Set.


HashSet(class)-->t also contains unique elements. It maintains the insertion order and permits null elements.
Set<String> s1=new HashSet<String>();

Treeset(class)--> The elements in TreeSet stored in ascending order.
Set <String> s2=new TreeSet<String>();

LinkedHashSet-->It also contains unique elements. It maintains the insertion order and permits null elements.
Set <String> s3=new LinkedHashSet<String>();

Map--> It represents a mapping between a set of keys and their corresponding values. A Map cannot contain duplicate keys;
each key can map to at most one value. The Map interface is used to store key-value pairs, where each key is unique,
 and it provides an efficient way to retrieve, update, and manipulate data based on keys.

 HashMap-->HashMap implements the Map interface and is used for managing large datasets efficiently.
 ---------------------------------------------------------------------------------------------------------------------------
                         ### Inheritance ###

 mechanism in Java by which one class is allowed to inherit the features(fields and methods) of another class.

 The "extends" keyword is used for inheritance in Java

 1.Single level inheritance-->parent class property into child class
  a sub-class is derived from only one super class. It inherits the properties and behavior of a single-parent class.
         ----
        | B  |    -->super(single parent class)
        -----

          |
         -----
        | A  |     -->subclass
         ----
 2.Multi level inheritance:-
 a derived class will be inheriting a base class, and as well as the derived class also acts as the base class for other classes.
         -------
         |  C  |        --> base class
         ------
           ^
           |
          ----
         | B  |    -->intermidiate class
         -----
           ^
           |
          -----
         | A  |     -->Derived class
          ----
 3.Hiearchical Inheritance-->
   one parent class(base class) serves to more than one child class.

 4.Multiple inheritance-->Diamond ambiguity
 one child class(base class)having more than one parent class.
 #.java 8 support multiple inheritance to interface but not classes.

 5.Hybrid inheritance-->
 combination two or more type of inheritance.

 ----------------------------------------------------------------------------------------------------------
                       ### Encapsulation ###

Encapsulation in Java is a process of wrapping code and data together into a single unit.
Java Encapsulation is a way of hiding the implementation details of a class from outside access and only exposing a
 public interface that can be used to interact with the class.

// Person Class
class Person {

    private String name;
    private int age;

    public String getName() { return name; }

    public void setName(String name) { this.name = name; }

    public int getAge() { return age; }

    public void setAge(int age) { this.age = age; }
}

// Driver Class
public class Main {
    // main function
    public static void main(String[] args)
    {
        // person object created
        Person person = new Person();
        person.setName("John");
        person.setAge(30);

        // Using methods to get the values from the
        // variables
        System.out.println("Name: " + person.getName());
        System.out.println("Age: " + person.getAge());
    }
}
-----------------------------------------------------------------------------------------------------------
                    ### Java not 100% OOPS ##

1.Primitive datatype--> primitive datatype like int,float,double etc. are not object.
2.diamond ambiguity-->multiple inheritance
------------------------------------------------------------------------------------------------------------
                ### Garbage Collector ###

Garbage collection is process of looking into at heap memory ,identify which object are in use or not and deleting
unuse object.

outofMemoryError-->this error is thrown there is insufficient space allocation for object in the java heap.
-------------------------------------------------------------------------------------------------------